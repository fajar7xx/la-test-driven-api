<?php

namespace Tests\Feature;

use App\Models\TodoList;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TodoListTest extends TestCase
{
    private $list;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
//        $this->list = TodoList::factory()->create();
        $this->list = $this->createTodoList();
    }

    /**
     * test fetch to do listA
     *
     * @return void
     */
    public function test_fetch_all_todo_lists()
    {
        $lists = $this->createTodoList([
            'name' => 'my list'
        ]);

        $response = $this->getJson('api/todo-list');

        $this->assertEquals(13, count($response->json()));
        // $this->assertEquals($lists->name, $response->json()['name']);
    }


    public function test_fetch_todo_list()
    {
//        $list = TodoList::factory()->create();

        $response = $this->getJson('api/todo-list/' . $this->list->id);

        $response->assertOk();
        $this->assertEquals($response->json()['name'], $this->list->name);
    }

    /**
     * test store new todo list
     * @return void
     */
    public function test_store_new_todo_list(): void
    {
        $list = TodoList::factory()->make();
        $response = $this->postJson('api/todo-list', [
            'name' => $list->name
        ]);

        $response->assertCreated();
        $this->assertEquals($list->name, $response['name']);
        $this->assertDatabaseHas('todo_lists', [
            'name' => $list->name
        ]);
    }

    /**
     * test store data that name field must required
     * @return void
     */
    public function test_while_storing_todo_list_name_field_is_required(): void
    {
        $this->withExceptionHandling();
        $response = $this->postJson('api/todo-list');
        $response->assertUnprocessable();
        $response->assertJsonValidationErrors(['name']);
//        $this->assertSame(
//            \Lang::get('validation.required'),
//            $response->json('errors.name.0')
//        );
    }

    /**
     * test udpate todo list
     * @return void
     */
    public function test_update_todo_list():void
    {
        $response = $this->patchJson('api/todo-list/' . $this->list->id, [
            'name' => 'Update new todo list '
        ]);

        $response->assertOk();
        $this->assertDatabaseHas('todo_lists', [
            'id' => $this->list->id,
            'name' => 'Update new todo list'
        ]);
    }

    public function test_while_updating_todo_list_name_field_is_required(): void
    {
        $this->withExceptionHandling();

        $response = $this->patchJson('api/todo-list/' . $this->list->id, [
            'name' => ''
        ]);
        $response->assertUnprocessable();
        $response->assertJsonValidationErrors(['name']);
    }

    /**
     * test delete one todo list
     * @return void
     */
    public function test_delete_todo_list(): void
    {
        $response = $this->deleteJson('api/todo-list/' . $this->list->id);
        $response->assertNoContent();

        $this->assertDatabaseMissing('todo_lists', [
            'name' => $this->list->name
        ]);
    }

    /**
     * Undocumented function
     *
     * @param array $args
     * @return object
     */
    private function createTodoList($args = []): object
    {
        return TodoList::factory()->create($args);
    }

    /**
     * @return array[]
     */
    public function validationErrors(): array
    {
        return [
            [['name' => ''], 'name', 'validation.required'],
            [['name' => \Str::random(4)], 'name', 'validation.min.string', ['min' => 5]]
        ];
    }

    /**
     * @dataProvider validationErrors
     */
    // public function test_validation_store_todo_list_errors(
    //     array $invalidData,
    //     string $invalidField,
    //     string $errorMessage,
    //     array $messageParams = []
    // ): void
    // {
    //     $this->withExceptionHandling();
    //     TodoList::factory()->create();

    //     $response = $this->postJson('api/todo-list', $invalidData);

    //     $response->assertUnprocessable();
    //     $response->assertJsonValidationErrors($invalidField);
    //     $this->assertTrue(\Lang::has($errorMessage));
    //     $this->assertSame(
    //         \Lang::get(
    //             $errorMessage,
    //             array_merge(
    //                 ['attribute', str_replace('_', ' ', $invalidField)],
    //                 $messageParams
    //             )
    //         ),
    //         $response->json("errors.{$invalidField}.0")
    //     );
    // }
}
